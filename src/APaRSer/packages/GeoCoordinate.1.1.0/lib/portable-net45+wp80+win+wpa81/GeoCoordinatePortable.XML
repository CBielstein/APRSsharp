<?xml version="1.0"?>
<doc>
    <assembly>
        <name>GeoCoordinatePortable</name>
    </assembly>
    <members>
        <member name="T:GeoCoordinatePortable.GeoCoordinate">
            <summary>
            Represents a geographical location that is determined by latitude and longitude
            coordinates. May also include altitude, accuracy, speed, and course information.
            </summary>
        </member>
        <member name="F:GeoCoordinatePortable.GeoCoordinate.Unknown">
            <summary>
            Represents a <see cref="T:GeoCoordinatePortable.GeoCoordinate"/> object that has unknown latitude and longitude fields.
            </summary>
        </member>
        <member name="M:GeoCoordinatePortable.GeoCoordinate.#ctor">
            <summary>
            Initializes a new instance of GeoCoordinate that has no data fields set.
            </summary>
        </member>
        <member name="M:GeoCoordinatePortable.GeoCoordinate.#ctor(System.Double,System.Double)">
            <summary>
                Initializes a new instance of the GeoCoordinate class from latitude and longitude data.
            </summary>
            <param name="latitude">The latitude of the location. May range from -90.0 to 90.0. </param>
            <param name="longitude">The longitude of the location. May range from -180.0 to 180.0.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Latitude or longitude is out of range.</exception>
        </member>
        <member name="M:GeoCoordinatePortable.GeoCoordinate.#ctor(System.Double,System.Double,System.Double)">
            <summary>
                Initializes a new instance of the GeoCoordinate class from latitude, longitude, and altitude data.
            </summary>
            <param name="latitude">Latitude. May range from -90.0 to 90.0.</param>
            <param name="longitude">Longitude. May range from -180.0 to 180.0</param>
            <param name="altitude">The altitude in meters. May be negative, 0, positive, or Double.NaN, if unknown.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
                latitude, longitude or altitude is out of range.
            </exception>
        </member>
        <member name="M:GeoCoordinatePortable.GeoCoordinate.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
                Initializes a new instance of the GeoCoordinate class from latitude, longitude, altitude, horizontal accuracy,
                vertical accuracy, speed, and course.
            </summary>
            <param name="latitude">The latitude of the location. May range from -90.0 to 90.0.</param>
            <param name="longitude">The longitude of the location. May range from -180.0 to 180.0.</param>
            <param name="altitude">The altitude in meters. May be negative, 0, positive, or Double.NaN, if unknown.</param>
            <param name="horizontalAccuracy">
                The accuracy of the latitude and longitude coordinates, in meters. Must be greater
                than or equal to 0. If a value of 0 is supplied to this constructor, the HorizontalAccuracy property will be set to
                Double.NaN.
            </param>
            <param name="verticalAccuracy">
                The accuracy of the altitude, in meters. Must be greater than or equal to 0. If a value
                of 0 is supplied to this constructor, the VerticalAccuracy property will be set to Double.NaN.
            </param>
            <param name="speed">
                The speed measured in meters per second. May be negative, 0, positive, or Double.NaN, if unknown.
                A negative speed can indicate moving in reverse.
            </param>
            <param name="course">
                The direction of travel, rather than orientation. This parameter is measured in degrees relative
                to true north. Must range from 0 to 360.0, or be Double.NaN.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
                If latitude, longitude, horizontalAccuracy, verticalAccuracy, course is out of range.
            </exception>
        </member>
        <member name="P:GeoCoordinatePortable.GeoCoordinate.Latitude">
            <summary>
                Gets or sets the latitude of the GeoCoordinate.
            </summary>
            <returns>
                Latitude of the location.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Latitude is set outside the valid range.</exception>
        </member>
        <member name="P:GeoCoordinatePortable.GeoCoordinate.Longitude">
            <summary>
                Gets or sets the longitude of the GeoCoordinate.
            </summary>
            <returns>
                The longitude.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Longitude is set outside the valid range.</exception>
        </member>
        <member name="P:GeoCoordinatePortable.GeoCoordinate.HorizontalAccuracy">
            <summary>
                Gets or sets the accuracy of the latitude and longitude that is given by the GeoCoordinate, in meters.
            </summary>
            <returns>
                The accuracy of the latitude and longitude, in meters.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">HorizontalAccuracy is set outside the valid range.</exception>
        </member>
        <member name="P:GeoCoordinatePortable.GeoCoordinate.VerticalAccuracy">
            <summary>
                Gets or sets the accuracy of the altitude given by the GeoCoordinate, in meters.
            </summary>
            <returns>
                The accuracy of the altitude, in meters.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">VerticalAccuracy is set outside the valid range.</exception>
        </member>
        <member name="P:GeoCoordinatePortable.GeoCoordinate.Speed">
            <summary>
                Gets or sets the speed in meters per second.
            </summary>
            <returns>
                The speed in meters per second. The speed must be greater than or equal to zero, or Double.NaN.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Speed is set outside the valid range.</exception>
        </member>
        <member name="P:GeoCoordinatePortable.GeoCoordinate.Course">
            <summary>
                Gets or sets the heading in degrees, relative to true north.
            </summary>
            <returns>
                The heading in degrees, relative to true north.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Course is set outside the valid range.</exception>
        </member>
        <member name="P:GeoCoordinatePortable.GeoCoordinate.IsUnknown">
            <summary>
                Gets a value that indicates whether the GeoCoordinate does not contain latitude or longitude data.
            </summary>
            <returns>
                true if the GeoCoordinate does not contain latitude or longitude data; otherwise, false.
            </returns>
        </member>
        <member name="P:GeoCoordinatePortable.GeoCoordinate.Altitude">
            <summary>
                Gets the altitude of the GeoCoordinate, in meters.
            </summary>
            <returns>
                The altitude, in meters.
            </returns>
        </member>
        <member name="M:GeoCoordinatePortable.GeoCoordinate.Equals(GeoCoordinatePortable.GeoCoordinate)">
            <summary>
                Determines if the GeoCoordinate object is equivalent to the parameter, based solely on latitude and longitude.
            </summary>
            <returns>
                true if the GeoCoordinate objects are equal; otherwise, false.
            </returns>
            <param name="other">The GeoCoordinate object to compare to the calling object.</param>
        </member>
        <member name="M:GeoCoordinatePortable.GeoCoordinate.op_Equality(GeoCoordinatePortable.GeoCoordinate,GeoCoordinatePortable.GeoCoordinate)">
            <summary>
                Determines whether two GeoCoordinate objects refer to the same location.
            </summary>
            <returns>
                true, if the GeoCoordinate objects are determined to be equivalent; otherwise, false.
            </returns>
            <param name="left">The first GeoCoordinate to compare.</param>
            <param name="right">The second GeoCoordinate to compare.</param>
        </member>
        <member name="M:GeoCoordinatePortable.GeoCoordinate.op_Inequality(GeoCoordinatePortable.GeoCoordinate,GeoCoordinatePortable.GeoCoordinate)">
            <summary>
                Determines whether two GeoCoordinate objects correspond to different locations.
            </summary>
            <returns>
                true, if the GeoCoordinate objects are determined to be different; otherwise, false.
            </returns>
            <param name="left">The first GeoCoordinate to compare.</param>
            <param name="right">The second GeoCoordinate to compare.</param>
        </member>
        <member name="M:GeoCoordinatePortable.GeoCoordinate.GetDistanceTo(GeoCoordinatePortable.GeoCoordinate)">
            <summary>
                Returns the distance between the latitude and longitude coordinates that are specified by this GeoCoordinate and
                another specified GeoCoordinate.
            </summary>
            <returns>
                The distance between the two coordinates, in meters.
            </returns>
            <param name="other">The GeoCoordinate for the location to calculate the distance to.</param>
        </member>
        <member name="M:GeoCoordinatePortable.GeoCoordinate.GetHashCode">
            <summary>
                Serves as a hash function for the GeoCoordinate.
            </summary>
            <returns>
                A hash code for the current GeoCoordinate.
            </returns>
        </member>
        <member name="M:GeoCoordinatePortable.GeoCoordinate.Equals(System.Object)">
            <summary>
                Determines if a specified GeoCoordinate is equal to the current GeoCoordinate, based solely on latitude and
                longitude.
            </summary>
            <returns>
                true, if the GeoCoordinate objects are equal; otherwise, false.
            </returns>
            <param name="obj">The object to compare the GeoCoordinate to.</param>
        </member>
        <member name="M:GeoCoordinatePortable.GeoCoordinate.ToString">
            <summary>
                Returns a string that contains the latitude and longitude.
            </summary>
            <returns>
                A string that contains the latitude and longitude, separated by a comma.
            </returns>
        </member>
        <member name="T:GeoCoordinatePortable.GeoPosition`1">
            <summary>
            Contains location data of a type specified by the type parameter of the <see cref="T:GeoCoordinatePortable.GeoPosition`1"/> class
            </summary>
            <typeparam name="T">The type of the location data.</typeparam>
        </member>
        <member name="M:GeoCoordinatePortable.GeoPosition`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GeoCoordinatePortable.GeoPosition`1"/> class.
            </summary>
        </member>
        <member name="M:GeoCoordinatePortable.GeoPosition`1.#ctor(System.DateTimeOffset,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:GeoCoordinatePortable.GeoPosition`1"/> class
            with a timestamp and position.
            </summary>
            <param name="timestamp">The time the location data was obtained.</param>
            <param name="location">The location data to use to initialize the <see cref="T:GeoCoordinatePortable.GeoPosition`1"/> object.</param>
        </member>
        <member name="P:GeoCoordinatePortable.GeoPosition`1.Location">
            <summary>
            Gets or sets the location data for the <see cref="T:GeoCoordinatePortable.GeoPosition`1"/> object.
            </summary>
            <value>
            An object of type T that contains the location data for the <see cref="T:GeoCoordinatePortable.GeoPosition`1"/> object.
            </value>
        </member>
        <member name="P:GeoCoordinatePortable.GeoPosition`1.Timestamp">
            <summary>
            Gets or sets the time when the location data was obtained.
            </summary>
            <value>
            A <see cref="T:System.DateTimeOffset"/> that contains the time the location data was created.
            </value>
        </member>
    </members>
</doc>
